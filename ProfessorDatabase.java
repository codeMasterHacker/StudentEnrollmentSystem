import java.sql.*;
import javax.swing.*;

public class ProfessorDatabase
{	
	public static boolean writeProfessor(Professor professor) //Database is preset. professorID field is of data type auto number, ergo the professorID will be auto generated by the database
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			database.getStatement().executeUpdate("INSERT INTO Professor (firstName, lastName, department) VALUES ('" + professor.getFirstName() + "', '" + professor.getLastName() + "', '" + professor.getDepartment().getDepartmentName() + "')");
			database.close();
			return true;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return false;
		}
	}
	
	public static Professor readProfessor(int professorID)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			ResultSet result = database.getStatement().executeQuery("SELECT * FROM Professor WHERE professorID = " + professorID);
			result.next();
			database.close();
			return new Professor(professorID, result.getString("firstName"), result.getString("lastName"), DepartmentDatabase.readDepartment(result.getString("department")));
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return null;
		}
	}
	
	public static boolean editProfessor(Professor professor)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			database.getStatement().executeUpdate("UPDATE Professor SET firstName = '" + professor.getFirstName() + "', lastName = '" + professor.getLastName() + "', department = '" + professor.getDepartment().getDepartmentName() + "' WHERE professorID = " + professor.getProfessorID());
			database.close();
			return true;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return false;
		}
	}
	
	public static boolean deleteProfessor(int professorID)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			database.getStatement().executeUpdate("DELETE FROM Professor WHERE professorID = " + professorID);
			database.close();
			return true;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return false;
		}
	}
	
	public static JTable getProfessorJTable(String department)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			ResultSet resultSet = database.getStatement().executeQuery("SELECT * FROM Professor WHERE department = '" + department + "' ORDER BY lastName");
			resultSet.last();
			int numRows = resultSet.getRow();
			resultSet.first();
			
			if (numRows == 0)
				throw new SQLException();
			 
			ResultSetMetaData meta = resultSet.getMetaData();
			String[] colNames = new String[meta.getColumnCount()];
			colNames[0] = "Professor    ID"; colNames[1] = "First    Name"; colNames[2] = "Last    Name"; colNames[3] = "Department";
			 
			String[][] tableData = new String[numRows][meta.getColumnCount()];
			for (int row = 0; row < numRows; row++)
			{
				for (int col = 0; col < meta.getColumnCount(); col++)
					tableData[row][col] = resultSet.getString(col + 1);
				
				resultSet.next();
			}
			
			database.close();
			return new JTable(tableData, colNames);
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return null;
		}
	}
	
	public static String[] getProfessorsInfo(String department)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			ResultSet resultSet = database.getStatement().executeQuery("SELECT * FROM Professor WHERE department = '" + department + "' ORDER BY lastName");
			resultSet.last();
			int numRows = resultSet.getRow();
			resultSet.beforeFirst();
			
			if (numRows == 0)
				throw new SQLException();
			
			String[] professorsInfo = new String[numRows];
			
			for (int i = 0; resultSet.next(); i++)
				professorsInfo[i] = resultSet.getInt("professorID") + " " + resultSet.getString("firstName") + " " + resultSet.getString("lastName");
			
			database.close();
			return professorsInfo;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return null;
		}
	}
	
	public static boolean isEmpty()
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			ResultSet resultSet = database.getStatement().executeQuery("SELECT * FROM Professor");
			resultSet.last();
			int numRows = resultSet.getRow();
			database.close();
			
			if (numRows == 0)
				return true;
			else
				return false;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return true;
		}
	}
}