import java.sql.*;
import javax.swing.*;

public class EnrollmentDatabase
{
	public static boolean writeEnrollment(Enrollment enrollment) //Database is preset. enrollmentID field is of data type auto number, ergo the enrollmentID will be auto generated by the database
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			database.getStatement().executeUpdate("INSERT INTO Enrollment (studentID, courseName, semester, academicYear, grade) VALUES (" + enrollment.getStudent().getStudentID() + ", '" + enrollment.getCourse().getCourseName() + "', '" + enrollment.getSemester() + "', " + enrollment.getAcademicYear() + ", '" + enrollment.getGrade() + "')");
			database.close();
			return true;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return false;
		}
	}
	
	public static Enrollment readEnrollment(int enrollmentID)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			ResultSet result = database.getStatement().executeQuery("SELECT * FROM Enrollment WHERE enrollmentID = " + enrollmentID);
			result.next();
			database.close();
			return new Enrollment(enrollmentID, StudentDatabase.readStudent(result.getInt("studentID")), CourseDatabase.readCourse(result.getString("courseName")), result.getString("semester"), result.getInt("academicYear"), result.getString("grade"));
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return null;
		}
	}
	
	public static boolean editGrade(Enrollment enrollment)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			database.getStatement().executeUpdate("UPDATE Enrollment SET grade = '" + enrollment.getGrade() + "' WHERE enrollmentID = " + enrollment.getEnrollmentID());
			database.close();
			return true;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return false;
		}
	}
	
	public static boolean deleteEnrollment(int enrollmentID)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			database.getStatement().executeUpdate("DELETE FROM Enrollment WHERE enrollmentID = " + enrollmentID);
			database.close();
			return true;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return false;
		}
	}
	
	public static boolean deleteEnrollments(int studentID, String semester, int academicYear)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			database.getStatement().executeUpdate("DELETE FROM Enrollment WHERE studentID = " + studentID + " AND semester = '" + semester + "' AND academicYear = " + academicYear);
			database.close();
			return true;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return false;
		}
	}
	
	public static JTable getEnrollmentJTable(int studentID, String semester, int academicYear)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			ResultSet resultSet = database.getStatement().executeQuery("SELECT * FROM Enrollment WHERE studentID = " + studentID + " AND semester = '" + semester + "' AND academicYear = " + academicYear + " ORDER BY courseName");
			resultSet.last();
			int numRows = resultSet.getRow();
			resultSet.first();
			
			if (numRows == 0)
				throw new SQLException();
			
			ResultSetMetaData meta = resultSet.getMetaData();
			String[] colNames = new String[meta.getColumnCount()];
			colNames[0] = "Enrollment    ID"; colNames[1] = "Student    ID"; colNames[2] = "Course    Name"; colNames[3] = "Semester"; colNames[4] = "Academic    Year"; colNames[5] = "Grade";
			 
			String[][] tableData = new String[numRows][meta.getColumnCount()];
			for (int row = 0; row < numRows; row++)
			{
				for (int col = 0; col < meta.getColumnCount(); col++)
					tableData[row][col] = resultSet.getString(col + 1);
				
				resultSet.next();
			}
			
			database.close();
			return new JTable(tableData, colNames);
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return null;
		}
	}
	
	public static boolean isEmpty()
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			ResultSet resultSet = database.getStatement().executeQuery("SELECT * FROM Enrollment");
			resultSet.last();
			int numRows = resultSet.getRow();
			database.close();
			
			if (numRows == 0)
				return true;
			else
				return false;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return true;
		}
	}
	
	public static boolean departmentCoursesEmpty()
	{
		String[] courseNames = null;
		String[] departmentNames = DepartmentDatabase.getDepartmentNames();
		
		for (String departmentName : departmentNames)
		{
			courseNames = CourseDatabase.getCourseNames(departmentName);
			
			if (courseNames == null)
				return true;
		}
		
		return false;
	}
	
	public static boolean duplicateEnrollment(Enrollment enrollment)
	{
		ConnectDatabase database = new ConnectDatabase();
		
		try
		{
			ResultSet resultSet = database.getStatement().executeQuery("SELECT * FROM Enrollment WHERE studentID = " + enrollment.getStudent().getStudentID() + " AND courseName = '" + enrollment.getCourse().getCourseName() + "' AND semester = '" + enrollment.getSemester() + "' AND academicYear = " + enrollment.getAcademicYear());
			resultSet.last();
			int numRows = resultSet.getRow();
			database.close();
			
			if (numRows == 0)
				return false;
			else
				return true;
		}
		catch (SQLException e)
		{
			database.close();
			e.printStackTrace();
			return false;
		}
	}
}